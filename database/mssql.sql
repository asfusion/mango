CREATE TABLE dbo.author ( 	id              	varchar(35) NOT NULL,	username        	nvarchar(50) NULL,	password        	nvarchar(50) NULL,	name            	nvarchar(100) NULL,	email           	nvarchar(255) NULL,	description     	ntext NULL,	shortdescription	ntext NULL,	picture         	varchar(100) NULL,	alias           	varchar(100) NULL,	active          	bit NULL DEFAULT (1) 	)GOCREATE TABLE dbo.author_blog ( 	author_id	varchar(35) NOT NULL,	blog_id  	varchar(50) NOT NULL,	role     	varchar(20) NULL 	)GOCREATE TABLE dbo.blog ( 	id         	varchar(50) NOT NULL,	title      	nvarchar(150) NULL,	description	ntext NULL,	tagline    	nvarchar(150) NULL,	skin       	varchar(100) NULL,	url        	varchar(255) NULL,	charset    	varchar(50) NULL,	basePath   	varchar(255) NULL 	)GOCREATE TABLE dbo.category ( 	id                	varchar(35) NOT NULL,	name              	nvarchar(150) NULL,	title             	varchar(150) NULL,	description       	ntext NULL,	created_on        	datetime NULL,	parent_category_id	varchar(35) NULL,	blog_id           	varchar(50) NULL 	)GOCREATE TABLE dbo.comment ( 	id               	varchar(35) NOT NULL,	entry_id         	varchar(35) NULL,	content          	ntext NULL,	creator_name     	nvarchar(50) NULL,	creator_email    	nvarchar(100) NULL,	creator_url      	nvarchar(255) NULL,	created_on       	smalldatetime NULL DEFAULT (getdate()),	approved         	bit NULL,	author_id        	varchar(35) NULL,	parent_comment_id	varchar(35) NULL,	rating           	float NULL 	)GOCREATE TABLE dbo.entry ( 	id                	varchar(35) NOT NULL,	name              	nvarchar(200) NULL,	title             	nvarchar(200) NULL,	content           	ntext NULL,	excerpt           	ntext NULL,	author_id         	varchar(35) NULL,	comments_allowed  	bit NULL DEFAULT (1),	trackbacks_allowed	bit NULL,	status            	varchar(50) NULL,	last_modified     	smalldatetime NULL DEFAULT (getdate()),	blog_id           	varchar(50) NULL 	)GOCREATE TABLE dbo.entry_custom_field ( 	id         	varchar(255) NOT NULL,	entry_id   	varchar(35) NOT NULL,	name       	nvarchar(255) NULL,	field_value	ntext NULL 	)GOCREATE TABLE dbo.entry_subscription ( 	entry_id	varchar(35) NOT NULL,	email   	nvarchar(100) NOT NULL,	name    	nvarchar(50) NULL,	type    	varchar(20) NOT NULL,	mode    	varchar(20) NULL DEFAULT ('instant') 	)GOCREATE TABLE dbo.link ( 	id         	varchar(35) NOT NULL,	title      	nvarchar(100) NULL DEFAULT (null),	description	nvarchar(1000) NULL DEFAULT (null),	address    	varchar(255) NULL DEFAULT (null),	category_id	varchar(35) NULL DEFAULT (null),	showOrder  	int NULL DEFAULT ('0') 	)GOCREATE TABLE dbo.link_category ( 	id                	varchar(35) NOT NULL,	name              	nvarchar(50) NULL DEFAULT (null),	description       	nvarchar(1000) NULL DEFAULT (null),	parent_category_id	varchar(35) NULL DEFAULT (null),	blog_id           	varchar(50) NULL DEFAULT (null) 	)GOCREATE TABLE dbo.media ( 	id           	varchar(35) NOT NULL,	entry_id     	varchar(35) NULL,	url          	varchar(255) NULL,	fileSize     	int NULL,	type         	varchar(50) NULL,	medium       	varchar(50) NULL,	isDefault    	bit NULL,	duration     	int NULL,	height       	int NULL,	width        	int NULL,	lang         	varchar(50) NULL,	rating       	varchar(50) NULL,	rating_scheme	varchar(10) NULL,	title        	nvarchar(100) NULL,	description  	nvarchar(1000) NULL,	thumbnail    	varchar(255) NULL,	media_group  	varchar(35) NULL,	copyright    	varchar(50) NULL 	)GOCREATE TABLE dbo.page ( 	id            	varchar(35) NOT NULL,	template      	varchar(100) NULL,	parent_page_id	varchar(35) NULL,	hierarchy     	text NULL,	sort_order    	int NULL DEFAULT (1) 	)GOCREATE TABLE dbo.permission ( 	id         	varchar(20) NOT NULL,	name       	varchar(50) NULL,	description	varchar(255) NULL,	is_custom  	bit NULL DEFAULT (1) 	)GOCREATE TABLE dbo.post ( 	id       	varchar(35) NOT NULL,	posted_on	datetime NOT NULL DEFAULT (getdate()) 	)GOCREATE TABLE dbo.post_category ( 	post_id    	varchar(35) NOT NULL,	category_id	varchar(35) NOT NULL 	)GOCREATE TABLE dbo.role ( 	id         	varchar(20) NOT NULL,	name       	varchar(50) NULL,	description	varchar(255) NULL DEFAULT (null),	preferences	ntext NULL DEFAULT (null) 	)GOCREATE TABLE dbo.role_permission ( 	role_id      	varchar(20) NOT NULL,	permission_id	varchar(20) NOT NULL 	)GOCREATE TABLE dbo.trackback ( 	id               	varchar(35) NOT NULL,	entry_id         	varchar(35) NULL,	content          	ntext NULL,	title            	nvarchar(200) NULL,	creator_url      	nvarchar(255) NULL,	creator_url_title	nvarchar(50) NULL,	created_on       	smalldatetime NULL,	approved         	bit NULL 	)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_all_pages', 'Manage pages', 'Add, edit and remove any page', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_all_posts', 'Manage all posts', 'Edit and remove other author''s posts', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_categories', 'Manage categories', 'Add, edit and delete categories', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_files', 'Manage files', 'Upload, rename and delete files', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_links', 'Manage links', 'Add, edit and remove links', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_pages', 'Manage own pages', 'Add, edit, and remove pages created by the user', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_plugin_prefs', 'Manage plugin custom settings', 'Change settings specified by plugins', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_plugins', 'Manage plugins', 'Install and remove plugins', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_posts', 'Manage own posts', 'Create and edit own posts', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_settings', 'Manage blog settings', 'Change blog main settings', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_themes', 'Manage themes', 'Download and remove themes', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('manage_users', 'Manage users', 'Add and edit users and permissions', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('plublish_pages', 'Publish pages', 'If not enabled, user can only create drafts or "to review" pages', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('publish_posts', 'Publish posts', 'If not enabled, user can only create drafts or "to review" posts', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('set_plugins', 'Manage installed plugins', 'Activate and de-activate plugins', 0)GOINSERT INTO dbo.permission(id, name, description, is_custom)  VALUES('set_themes', 'Switch themes', 'Change the blog theme', 0)GOINSERT INTO dbo.role(id, name, description, preferences)  VALUES('administrator', 'Administrator', 'Somebody who has access to all the administration features.', N'')GOINSERT INTO dbo.role(id, name, description, preferences)  VALUES('author', 'Author', 'Somebody who can publish and manage their own posts and pages.', N'')GOINSERT INTO dbo.role(id, name, description, preferences)  VALUES('editor', 'Editor', 'Somebody who can publish posts, manage posts as well as manage other people''s posts.', N'')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_all_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'manage_all_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_all_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_all_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_all_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_categories')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'manage_categories')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_categories')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_files')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'manage_files')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_files')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_links')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_links')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'manage_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_plugin_prefs')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_plugin_prefs')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_plugins')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'manage_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'manage_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_settings')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_themes')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'manage_users')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'plublish_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'plublish_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'plublish_pages')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'publish_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('author', 'publish_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'publish_posts')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'set_plugins')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('administrator', 'set_themes')GOINSERT INTO dbo.role_permission(role_id, permission_id)  VALUES('editor', 'set_themes')GOCREATE INDEX IX_author_1	ON dbo.author(alias)GOCREATE INDEX IX_category	ON dbo.category(blog_id)GOCREATE INDEX IX_comment	ON dbo.comment(entry_id)GOCREATE INDEX IX_entry	ON dbo.entry(name)GOCREATE INDEX IX_media	ON dbo.media(entry_id)GOALTER TABLE dbo.author	ADD CONSTRAINT PK_author	PRIMARY KEY (id)GOALTER TABLE dbo.author_blog	ADD CONSTRAINT PK_author_blog	PRIMARY KEY (author_id, blog_id)GOALTER TABLE dbo.blog	ADD CONSTRAINT PK_blog	PRIMARY KEY (id)GOALTER TABLE dbo.category	ADD CONSTRAINT PK_category	PRIMARY KEY (id)GOALTER TABLE dbo.comment	ADD CONSTRAINT PK_comment	PRIMARY KEY (id)GOALTER TABLE dbo.entry	ADD CONSTRAINT PK_entry	PRIMARY KEY (id)GOALTER TABLE dbo.entry_custom_field	ADD CONSTRAINT PK_entry_custom_field	PRIMARY KEY (entry_id, id)GOALTER TABLE dbo.entry_subscription	ADD CONSTRAINT PK_subscription	PRIMARY KEY (email, entry_id, type)GOALTER TABLE dbo.link	ADD CONSTRAINT PK_link	PRIMARY KEY (id)GOALTER TABLE dbo.link_category	ADD CONSTRAINT PK_link_category	PRIMARY KEY (id)GOALTER TABLE dbo.media	ADD CONSTRAINT PK_media	PRIMARY KEY (id)GOALTER TABLE dbo.page	ADD CONSTRAINT PK_page	PRIMARY KEY (id)GOALTER TABLE dbo.permission	ADD CONSTRAINT PK_permission	PRIMARY KEY (id)GOALTER TABLE dbo.post	ADD CONSTRAINT PK_post	PRIMARY KEY (id)GOALTER TABLE dbo.post_category	ADD CONSTRAINT PK_post_category	PRIMARY KEY (category_id, post_id)GOALTER TABLE dbo.role	ADD CONSTRAINT PK_role	PRIMARY KEY (id)GOALTER TABLE dbo.role_permission	ADD CONSTRAINT PK_role_permission	PRIMARY KEY (permission_id, role_id)GOALTER TABLE dbo.trackback	ADD CONSTRAINT PK_trackback	PRIMARY KEY (id)GOALTER TABLE dbo.author	ADD CONSTRAINT IX_author	UNIQUE (username)GOALTER TABLE dbo.author_blog	ADD CONSTRAINT FK_author_blog_blog	FOREIGN KEY(blog_id)	REFERENCES dbo.blog(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.author_blog	ADD CONSTRAINT FK_author_blog_author	FOREIGN KEY(author_id)	REFERENCES dbo.author(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.category	ADD CONSTRAINT FK_category_blog	FOREIGN KEY(blog_id)	REFERENCES dbo.blog(id)	ON DELETE NO ACTION 	ON UPDATE NO ACTION GOALTER TABLE dbo.comment	ADD CONSTRAINT FK_comment_entry	FOREIGN KEY(entry_id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.comment	ADD CONSTRAINT FK_comment_comment	FOREIGN KEY(parent_comment_id)	REFERENCES dbo.comment(id)	ON DELETE NO ACTION 	ON UPDATE NO ACTION GOALTER TABLE dbo.comment	ADD CONSTRAINT FK_comment_author	FOREIGN KEY(author_id)	REFERENCES dbo.author(id)	ON DELETE NO ACTION 	ON UPDATE NO ACTION GOALTER TABLE dbo.entry	ADD CONSTRAINT FK_entry_blog	FOREIGN KEY(blog_id)	REFERENCES dbo.blog(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.entry	ADD CONSTRAINT FK_entry_author	FOREIGN KEY(author_id)	REFERENCES dbo.author(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.entry_custom_field	ADD CONSTRAINT FK_entry_custom_field_entry	FOREIGN KEY(entry_id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.entry_subscription	ADD CONSTRAINT FK_subscription_entry	FOREIGN KEY(entry_id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.media	ADD CONSTRAINT FK_media_entry	FOREIGN KEY(entry_id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.page	ADD CONSTRAINT FK_page_entry	FOREIGN KEY(id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.post	ADD CONSTRAINT FK_post_entry	FOREIGN KEY(id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.post_category	ADD CONSTRAINT FK_post_category_post	FOREIGN KEY(post_id)	REFERENCES dbo.post(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.post_category	ADD CONSTRAINT FK_post_category_category	FOREIGN KEY(category_id)	REFERENCES dbo.category(id)	ON DELETE NO ACTION 	ON UPDATE NO ACTION GOALTER TABLE dbo.role_permission	ADD CONSTRAINT FK_role_permission_role	FOREIGN KEY(role_id)	REFERENCES dbo.role(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.role_permission	ADD CONSTRAINT FK_role_permission_permission	FOREIGN KEY(permission_id)	REFERENCES dbo.permission(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GOALTER TABLE dbo.trackback	ADD CONSTRAINT FK_trackback_entry	FOREIGN KEY(entry_id)	REFERENCES dbo.entry(id)	ON DELETE CASCADE 	ON UPDATE CASCADE GO